# automatically generated by the FlatBuffers compiler, do not modify
from typing import Any
import pickle
from pydantic import BaseModel
from pond import Field, File
from PIL import Image


def write_pickle(object: Any, fs, path: str):
    with fs.open(f"{path}.pickle", mode="wb") as fs_file:
        pickle.dump(object, fs_file)


def read_pickle(fs, path: str) -> Any:
    with fs.open(f"{path}.pickle", mode="rb") as fs_file:
        return pickle.load(fs_file)


# NOTE: fsspec does not have type interfaces?
def write_image(im: Image.Image, fs, path: str):
    print(f"Trying to write {path}")
    with fs.open(f"{path}.png", mode="wb") as fs_file:
        im.save(fs_file)


def read_image(fs, path: str) -> Image.Image:
    print(f"Trying to read {path}")
    with fs.open(f"{path}.png", mode="rb") as fs_file:
        return Image.open(fs_file).copy()


class VariantCatalog(BaseModel):
    image: File[Image.Image] = Field(reader=read_image, writer=write_image)
    images: list[File[Image.Image]] = Field(reader=read_image, writer=write_image)
    value: File[int] = Field(reader=read_pickle, writer=write_pickle)
    values: list[File[int]] = Field(reader=read_pickle, writer=write_pickle)
