# automatically generated by the FlatBuffers compiler, do not modify
from typing import Any
import pickle
from pydantic import BaseModel
from pond import Field, File
from PIL import Image
from conf.catalog import Navigation, Values


def write_pickle(object: Any, fs, path: str):
    with fs.open(f"{path}.pickle", mode="wb") as fs_file:
        pickle.dump(object, fs_file)


def read_pickle(fs, path: str) -> Any:
    with fs.open(f"{path}.pickle", mode="rb") as fs_file:
        return pickle.load(fs_file)


class FileDrive(BaseModel):
    navigation: File[list[Navigation]] = Field(
        reader=read_pickle, writer=write_pickle, ext="pickle"
    )
    images: File[list[float]] = Field(
        reader=read_pickle, writer=write_pickle, ext="pickle"
    )
    uncertainty: list[float]


# NOTE: fsspec does not have type interfaces?
def write_image(im: Image.Image, fs, path: str):
    print(f"Trying to write {path}")
    with fs.open(f"{path}.png", mode="wb") as fs_file:
        im.save(fs_file)


def read_image(fs, path: str) -> Image.Image:
    print(f"Trying to read {path}")
    with fs.open(f"{path}.png", mode="rb") as fs_file:
        return Image.open(fs_file).copy()


class FileCatalog(BaseModel):
    image: File[Image.Image] = Field(reader=read_image, writer=write_image, ext="png")
    drives: list[FileDrive]
    values: File[Values] = Field(reader=read_pickle, writer=write_pickle, ext="pickle")
